// components/queue.js
import { fetchVideoDetails, extractVideoId } from '../services/youtubeService-client.js';
import { showModal } from '../services/uiService.js';
import { createElementWithClasses, appendChildren, addFadeAnimation, handleAsyncOperation } from '../utils/helpers.js';

let songQueue = [];

export function initializeQueue(socket) {
    setupEventListeners(socket);
    setupSocketListeners(socket);
    socket.emit('getInitialState');
}

function setupEventListeners(socket) {
    document.getElementById('addSongButton').addEventListener('click', () => addSong(socket));
    document.getElementById('clearQueueBtn').addEventListener('click', () => showClearQueueModal(socket));
    document.getElementById('songInput').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            addSong(socket);
        }
    });
    document.getElementById('skipButton').addEventListener('click', () => {
        socket.emit('skipSong');
    });
}

function setupSocketListeners(socket) {
    socket.on('queueUpdated', (queue) => {
        if (Array.isArray(queue)) {  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            updateQueue(socket, queue);
        }
    });

    socket.on('initialQueue', (queue) => {
        if (Array.isArray(queue)) {  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            updateQueue(socket, queue);
        }
    });

    socket.on('playlistFound', ({ videos, originalVideo }) => {
        showPlaylistModal(socket, videos, originalVideo);
    });
}

async function updateQueue(socket, queue) {
    const queueList = document.getElementById('queue');
    if (!queueList) return;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á queue ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    songQueue = queue;
    
    // ‡∏•‡πâ‡∏≤‡∏á queue ‡πÄ‡∏î‡∏¥‡∏°
    queueList.innerHTML = '';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á queue items ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å index 1
    for (let i = 1; i < queue.length; i++) {
        try {
            const song = queue[i];
            if (song) {  // Check if song exists
                const listItem = await createQueueItem(socket, song, i);
                if (listItem) {  // Check if item was created successfully
                    queueList.appendChild(listItem);
                }
            }
        } catch (error) {
            console.error('Error creating queue item:', error);
        }
    }
}

async function createQueueItem(socket, song, index) {
  const listItem = createElementWithClasses("div", "list-group-item song-item");
  addFadeAnimation(listItem, "in");

  const videoId = extractVideoId(song);
  if (!videoId) return null;

  try {
    const videoDetails = await fetchVideoDetails(videoId);
    // Fallback content if details are basic
    const content = {
      playButton: createPlayButtonContainer(socket, index),
      thumbnail: createThumbnail(videoDetails),
      title: createTitleText(videoDetails),
      controls: createControls(socket, index),
    };

    Object.values(content).forEach((element) => {
      if (element) listItem.appendChild(element);
    });

    return listItem;
  } catch (error) {
    console.error("Error fetching video details:", error);
    // Create basic item with just video ID and controls
    const basicContent = {
      playButton: createPlayButtonContainer(socket, index),
      title: createBasicTitleText(videoId),
      controls: createControls(socket, index),
    };

    Object.values(basicContent).forEach((element) => {
      if (element) listItem.appendChild(element);
    });

    return listItem;
  }
}


function createBasicTitleText(videoId) {
    const titleText = createElementWithClasses('span', 'd-flex text-white');
    titleText.textContent = `Video ${videoId}`;
    return titleText;
  }

function createPlayButtonContainer(socket, index) {
    const container = createElementWithClasses('div', 'play-button-container');
    const playButton = createElementWithClasses('button', 'btn btn-link btn-sm play-button');

    playButton.innerHTML = '‚ñ∂Ô∏è';
    playButton.title = '‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ';

    playButton.onclick = () => {
        addFadeAnimation(playButton, 'click');
        setTimeout(() => {
            socket.emit('playSongFromQueue', index);
        }, 200);
    };

    container.appendChild(playButton);
    return container;
}

function createThumbnail(videoDetails) {
    const thumbnail = createElementWithClasses('img', 'me-3');
    thumbnail.src = videoDetails.thumbnails.default.url;
    thumbnail.alt = videoDetails.title;
    return thumbnail;
}

function createTitleText(videoDetails) {
    const titleText = createElementWithClasses('span', 'd-flex text-white');
    titleText.textContent = videoDetails.title;
    return titleText;
}

function createControls(socket, index) {
    const controlsElement = createElementWithClasses('div', 'song-controls');

    const upButton = createControlButton('‚¨ÜÔ∏è', 'btn-secondary', () => {
        if (index > 1) socket.emit('moveSong', index, index - 1);
    }, index <= 1);

    const downButton = createControlButton('‚¨áÔ∏è', 'btn-secondary', () => {
        if (index < songQueue.length - 1) socket.emit('moveSong', index, index + 1);
    }, index >= songQueue.length - 1);

    const removeButton = createControlButton('üóëÔ∏è', 'btn-danger', () => {
        removeSong(socket, index);
    });

    appendChildren(controlsElement, [upButton, downButton, removeButton]);
    return controlsElement;
}

function createControlButton(text, className, onClick, disabled = false) {
    const button = createElementWithClasses('button', `btn ${className} btn-sm ms-2`);
    button.textContent = text;
    button.onclick = onClick;
    button.disabled = disabled;
    return button;
}

function handleVideoLoadError(listItem, loadingIndicator, index, socket) {
    listItem.removeChild(loadingIndicator);
    const errorText = createElementWithClasses('span', 'text-danger');
    errorText.textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ';
    listItem.appendChild(errorText);
    socket.emit('removeSong', index);
}

function addSong(socket) {
    const songInput = document.getElementById('songInput');
    const song = songInput.value;
    if (song) {
        socket.emit('addSong', song);
        songInput.value = '';
    }
}

function removeSong(socket, index) {
    const listItem = document.querySelectorAll('.song-item')[index - 1];
    listItem.classList.add('fade-out');

    setTimeout(() => {
        socket.emit('removeSong', index);
    }, 300);
}

function skipSong() {
    socket.emit('skipSong');
}

function showClearQueueModal(socket) {
    showModal({
        title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß',
        content: `
      <p>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?</p>
      <small class="text-muted">‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö</small>
    `,
        buttons: [
            {
                id: 'cancel-clear',
                text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                class: 'btn btn-secondary',
                onClick: () => { }
            },
            {
                id: 'confirm-clear',
                text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå',
                class: 'btn btn-danger',
                onClick: () => {
                    const queueItems = document.querySelectorAll('.list-group-item');
                    queueItems.forEach(item => item.classList.add('fade-out'));
                    setTimeout(() => socket.emit('clearQueue'), 300);
                }
            }
        ]
    });
}

function showPlaylistModal(socket, videos, originalVideo) {
    showModal({
        title: '‡∏û‡∏ö Playlist',
        content: `
      <p>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å playlist ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?</p>
      <p class="text-muted small">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô playlist</p>
    `,
        buttons: [
            {
                id: 'cancel-playlist',
                text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                class: 'btn btn-secondary',
                onClick: () => { }
            },
            {
                id: 'add-single',
                text: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤',
                class: 'btn btn-primary',
                onClick: () => socket.emit('addPlaylistVideos', [originalVideo])
            },
            {
                id: 'add-all',
                text: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏•‡∏á (${videos.length} ‡πÄ‡∏û‡∏•‡∏á)`,
                class: 'btn btn-success',
                onClick: () => socket.emit('addPlaylistVideos', videos)
            }
        ]
    });
}